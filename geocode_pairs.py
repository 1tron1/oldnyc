#!/usr/bin/python

import cPickle
import geocoder
import sys

# generated by analysis/sf_streets.py
records = cPickle.load(file('/tmp/sf-crossstreets.pickle'))

g = geocoder.Geocoder("ABQIAAAAafDALeUVyxhUndZQcT0BRRQjgiEk1Ut90lZbiCSD8tXKcVgrkBQLYOFQ3xwutc5R9SNzfGaKxMnf7g", 5)

def FormatGeocode(x):
  return "%s\t%s -> %d @ %d (%s %f,%f)" % (
      id, addr, x.status, x.accuracy, x.city, x.lat, x.lon)


def Locate(g, id, addr):
  x = g.Locate(addr)
  if x.status != 200:
    print "%s\t%s -> status %d" % (id, addr, x.status)
    return None
  return x


pairs = []  # (street1, street2) -- in alphabetical order!
addresses = []  # e.g. 7142 market street
tinies = []  # e.g. Balance street
for rec in records:
  id, street1, cross = rec
  if not cross: continue

  # first check for an address
  addy = [x for x in cross if x.startswith("address:")]
  if addy:
    assert 1 == len(addy)
    loc_str = addy[0].replace("address:", "")
    x = Locate(g, id, loc_str)
    if x.accuracy != 8:
      sys.stderr.write('Failure: %s -> %s\n' % (addy[0], x))
    else:
      print '%s\t%f,%f\t%s' % (id, x.lat, x.lon, loc_str)
    continue

  # ... or a block
  block = [x for x in cross if x.startswith("block:")]
  if block:
    assert 1 == len(block)
    b = int(block[0].split(":")[1])
    assert 0 == b % 100
    loc_str = str(b + 50) + ' ' + street1
    x = Locate(g, id, loc_str)
    if x.accuracy != 8:
      sys.stderr.write('Failure: %s -> %s\n' % (addy[0], x))
    else:
      print '%s\t%f,%f\t%s' % (id, x.lat, x.lon, loc_str)
    continue

  # next check if it's just a tiny
  if len(cross) == 1 and cross[0].startswith("tiny:"):
    loc = cross[0].replace('tiny:', '')
    x = Locate(g, id, loc)
    if x.accuracy != 6:
      sys.stderr.write('Failure: %s -> %s\n' % (loc, x))
    else:
      print '%s\t%f,%f\t%s' % (id, x.lat, x.lon, loc)
    continue

  lat_lons = []
  loc_strs = []
  for c_street in [c for c in cross if not c.startswith("tiny:")]:
    pair = [c_street, street1]
    pair.sort()
    locatable = ' and '.join(pair)
    x = Locate(g, id, locatable)
    if x.accuracy != 7:
      sys.stderr.write('Failure: %s -> %s\n' % (locatable, x))
    else:
      lat_lons.append((x.lat, x.lon))
      loc_strs.append(locatable)

  if len(lat_lons) == 1:
    print '%s\t%f,%f\t%s' % (id, lat_lons[0][0], lat_lons[0][1], loc_strs[0])
  elif len(lat_lons) > 0:
    # TODO(danvk): check for important strings like "between"
    lat = 0.0
    lon = 0.0
    for xlat, xlon in lat_lons:
      lat += xlat
      lon += xlon
    lat /= len(lat_lons)
    lon /= len(lat_lons)
    print '%s\t%f,%f\t%s' % (id, lat, lon, ','.join(loc_strs))
  else:
    # these are geocode failures
    pass

